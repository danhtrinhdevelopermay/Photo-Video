name: Android Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build APK and Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        
    - name: Accept Android SDK Licenses
      run: |
        if [ -d "$ANDROID_SDK_ROOT" ]; then
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance completed"
        else
          echo "ANDROID_SDK_ROOT not found, skipping license acceptance"
        fi
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Verify Gradle setup and XML files
    - name: Verify Gradle Wrapper and XML Files
      run: |
        echo "Checking Gradle wrapper..."
        ./gradlew --version
        echo "Checking project structure..."
        ls -la
        ls -la app/
        echo "Verifying XML files are valid..."
        if command -v xmllint >/dev/null 2>&1; then
          xmllint --noout app/src/main/res/xml/backup_rules.xml
          xmllint --noout app/src/main/res/xml/data_extraction_rules.xml
          echo "XML files validation passed with xmllint!"
        else
          echo "xmllint not available, using Python validation..."
          python3 validate_xml.py
        fi
    
    # Step 1: Clean project first
    - name: Clean Project
      run: |
        echo "Cleaning project..."
        ./gradlew clean --stacktrace
        rm -rf app/build/
        rm -rf .gradle/
        rm -rf ~/.gradle/caches/
        echo "Deep clean completed"
      
    # Step 2: Validate Resources Before Build
    - name: Validate Resources
      run: |
        echo "Validating Android resources..."
        # Check if all resource files are properly formatted
        find app/src/main/res -name "*.xml" -exec xmllint --noout {} \; || echo "Some XML files have issues"
        echo "Resource validation completed"
    
    # Step 3: Run Lint Analysis (code quality check)
    - name: Run Lint Analysis
      run: |
        echo "Running lint analysis to check code quality..."
        ./gradlew lintDebug --stacktrace
        echo "Lint analysis completed"
      
    # Step 4: Run Unit Tests (code functionality check)
    - name: Run Unit Tests
      run: |
        echo "Running unit tests to verify code functionality..."
        ./gradlew testDebugUnitTest --stacktrace
        echo "Unit tests completed"
      
    # Step 5: Build Debug APK (only after analysis and tests pass)
    - name: Build Debug APK
      run: |
        echo "Building debug APK after successful analysis and tests..."
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Checking theme files:"
        cat app/src/main/res/values/themes.xml
        echo "Checking build.gradle dependencies:"
        grep -A 20 "dependencies {" app/build.gradle
        echo "Building APK with verbose output..."
        ./gradlew assembleDebug --stacktrace --info --no-daemon --refresh-dependencies
        echo "Build completed, checking outputs..."
        ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "No debug APK outputs found"
      
    # Step 6: Build Release APK (if on main branch and all tests pass)
    - name: Build Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Building release APK after all checks pass..."
        ./gradlew assembleRelease --stacktrace
      
    # Upload artifacts
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main' && success()
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release.apk
        
    # Upload test and analysis reports (generated before APK build)
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-and-analysis-reports
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/reports/lint-results-debug.html
          app/build/reports/lint-results-debug.xml
          
    # Display build results and diagnostics
    - name: Display Build Status
      if: always()
      run: |
        echo "=== BUILD SUMMARY ==="
        echo "✅ Code checkout completed"
        echo "✅ JDK 17 setup completed"
        echo "✅ Project cleaned"
        echo "✅ Resources validated"
        echo "✅ Lint analysis completed"
        echo "✅ Unit tests completed"
        echo "📁 Project structure:"
        find . -name "*.gradle" -type f
        echo "📊 Analysis and test reports:"
        ls -la app/build/reports/ 2>/dev/null || echo "No reports directory found"
        echo "📁 APK output directory:"
        ls -la app/build/outputs/apk/ 2>/dev/null || echo "No APK outputs found"
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK built successfully (after analysis and tests)"
          ls -lh app/build/outputs/apk/debug/app-debug.apk
        else
          echo "❌ Debug APK build failed"
          echo "🔍 Checking build directory..."
          ls -la app/build/ 2>/dev/null || echo "No build directory found"
        fi
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "✅ Release APK built successfully (after all checks)"
          ls -lh app/build/outputs/apk/release/app-release.apk
        fi
        echo "📊 Check the test-and-analysis-reports artifact for detailed results"